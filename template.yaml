
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Auto Video Insight Infrastructure Stack'

Parameters:
  ProjectName:
    Type: String
    Default: autovideoinsight
    Description: Name of the project (must be lowercase)

Resources:
  # ... keep existing code (S3 Bucket, Kinesis Video Stream, RekognitionStreamProcessor and IAM Role)

  # Lambda function for processing Rekognition results
  ProcessingFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-processor
      Runtime: nodejs18.x
      Handler: index.handler
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const s3 = new AWS.S3();
          const kinesis = new AWS.Kinesis();

          exports.handler = async (event) => {
            console.log('Processing video analysis results:', JSON.stringify(event));
            const results = [];
            
            try {
              // Process Kinesis records
              for (const record of event.Records) {
                const data = JSON.parse(Buffer.from(record.kinesis.data, 'base64').toString());
                console.log('Decoded Kinesis record:', data);
                
                // Extract timestamp from the Rekognition result
                const timestamp = data.InputInformation?.KinesisVideo?.ServerTimestamp 
                  || new Date().toISOString();
                
                const analysisResult = {
                  timestamp,
                  source_stream: data.InputInformation?.KinesisVideo?.StreamArn,
                  detected_objects: data.DetectedObjects || [],
                  detected_faces: data.FaceSearchResponse || [],
                  detected_labels: data.Labels || [],
                  confidence_threshold: data.ConnectedHomeSettings?.MinConfidence || 80,
                  frame_info: {
                    height: data.InputInformation?.KinesisVideo?.FrameHeight,
                    width: data.InputInformation?.KinesisVideo?.FrameWidth,
                  }
                };
                
                // Store individual analysis result
                const objectKey = `analysis-results/${timestamp}-${record.kinesis.sequenceNumber}.json`;
                
                await s3.putObject({
                  Bucket: process.env.PROCESSING_BUCKET,
                  Key: objectKey,
                  Body: JSON.stringify(analysisResult),
                  ContentType: 'application/json',
                  Metadata: {
                    'analysis-type': 'rekognition',
                    'source-stream': data.InputInformation?.KinesisVideo?.StreamArn || 'unknown',
                    'sequence-number': record.kinesis.sequenceNumber
                  }
                }).promise();
                
                console.log('Stored analysis results in S3:', objectKey);
                results.push(analysisResult);
                
                // Process high-confidence detections
                if (analysisResult.detected_objects && analysisResult.detected_objects.length > 0) {
                  const highConfidenceObjects = analysisResult.detected_objects
                    .filter(obj => obj.Confidence > 90);
                    
                  if (highConfidenceObjects.length > 0) {
                    console.log('High confidence detections:', highConfidenceObjects);
                    
                    // Store high confidence detections separately
                    const confidenceKey = `high-confidence/${timestamp}-${record.kinesis.sequenceNumber}.json`;
                    await s3.putObject({
                      Bucket: process.env.PROCESSING_BUCKET,
                      Key: confidenceKey,
                      Body: JSON.stringify({
                        timestamp,
                        detections: highConfidenceObjects
                      }),
                      ContentType: 'application/json',
                      Metadata: {
                        'analysis-type': 'high-confidence',
                        'confidence-threshold': '90',
                        'source-stream': data.InputInformation?.KinesisVideo?.StreamArn || 'unknown'
                      }
                    }).promise();
                    
                    console.log('Stored high confidence detections:', confidenceKey);
                  }
                }
              }
              
              // Generate summary report
              const summaryKey = `summaries/${new Date().toISOString()}-batch-summary.json`;
              await s3.putObject({
                Bucket: process.env.PROCESSING_BUCKET,
                Key: summaryKey,
                Body: JSON.stringify({
                  processed_at: new Date().toISOString(),
                  record_count: event.Records.length,
                  results_summary: results.map(r => ({
                    timestamp: r.timestamp,
                    object_count: r.detected_objects?.length || 0,
                    face_count: r.detected_faces?.length || 0,
                    label_count: r.detected_labels?.length || 0
                  }))
                }),
                ContentType: 'application/json'
              }).promise();
              
              console.log('Generated batch summary:', summaryKey);
              
              return {
                statusCode: 200,
                body: JSON.stringify({
                  message: 'Results processed successfully',
                  processed_records: event.Records.length,
                  summary_location: summaryKey
                })
              };
            } catch (error) {
              console.error('Error processing results:', error);
              
              // Store error information for debugging
              const errorKey = `errors/${new Date().toISOString()}-error.json`;
              try {
                await s3.putObject({
                  Bucket: process.env.PROCESSING_BUCKET,
                  Key: errorKey,
                  Body: JSON.stringify({
                    error: {
                      message: error.message,
                      stack: error.stack,
                      time: new Date().toISOString()
                    },
                    event: event
                  }),
                  ContentType: 'application/json'
                }).promise();
                
                console.log('Stored error details:', errorKey);
              } catch (s3Error) {
                console.error('Failed to store error details:', s3Error);
              }
              
              throw error;
            }
          };
      Environment:
        Variables:
          PROCESSING_BUCKET: !Ref ProcessingBucket
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 128

  # ... keep existing code (LambdaKinesisPermission, LambdaEventSourceMapping, LambdaExecutionRole and Outputs)

